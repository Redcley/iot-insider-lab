using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using ArgonneWebApi.Models.Datastore;
using ArgonneWebApi.Models.Dto;
using ArgonneWebApi.Models.Validation;
using ArgonneWebApi.Repositories;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Cors;

namespace ArgonneWebApi.Controllers
{
    /// <summary>
    /// Administrator API for Ads
    /// </summary>
    [Produces("application/json")]
    [EnableCors("AllowCORS")]
    public class AdController : Controller
    {
        private IEntityRepository<Ads> repository;
        private IEntityRepository<AdsForCampaigns> adForCampaignRepository;
        private IEntityRepository<Impressions> impressionRepository;
        private IMapper mapper;


        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="adCampRepo"></param>
        /// <param name="entityMapper"></param>
        public AdController(IEntityRepository<Ads> repo, IEntityRepository<AdsForCampaigns> adCampRepo,
            IEntityRepository<Impressions> impRepo, 
            IMapper entityMapper)
        {
            repository = repo;
            mapper = entityMapper;
            adForCampaignRepository = adCampRepo;
            impressionRepository = impRepo;
        }

        /// <summary>
        /// Get all Ads
        /// </summary>
        /// <param name="pager">paging settings</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("api/admin/[controller]")]
        [ProducesResponseType(typeof(IEnumerable<AdDto>), 200)]
        public async Task<IActionResult> GetAll([FromQuery]PagerDto pager)
        {
            return new OkObjectResult(mapper.Map<IEnumerable<Ads>, IEnumerable<AdDto>>(await repository.GetAll(Pager.FromPagerDto(pager)).ConfigureAwait(false)));
        }

        /// <summary>
        /// Get a Ad by id
        /// </summary>
        /// <param name="id">unique identifier for a Ad</param>
        /// <remarks>
        /// Id must be a valid GUID
        /// </remarks>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="400">Invalid Id</response>
        [HttpGet]
        [Route("api/admin/[controller]/{id}", Name = "GetAd")]
        [ProducesResponseType(typeof(AdDto), 200)]
        public async Task<IActionResult> Get(string id)
        {
            if (string.IsNullOrEmpty(id))
                return BadRequest();

            Guid idGuid;
            if(!Guid.TryParse(id, out idGuid))
            {
                return BadRequest();
            }

            var result = mapper.Map<Ads, AdDto>(
                await repository.GetSingle(item => item.AdId == idGuid).ConfigureAwait(false));

            if (null == result)
                return NotFound();

            return new OkObjectResult(result);
        }


        /// <summary>
        /// Create a new Ad
        /// </summary>
        /// <remarks>
        /// Id field does not need to be supplied, it is ignored. The unique identifier for the Ad will be generated by the system.
        /// </remarks>
        /// <response code="201">Created</response>
        /// <response code="400">Invalid Model</response>
        [HttpPost]
        [Route("api/admin/[controller]")]
        [ProducesResponseType(typeof(AdDto), 201)]
        public async Task<IActionResult> Create([FromBody]AdDto item)
        {
            if (item == null)
            {
                return BadRequest();
            }

            var validator = new AdValidator();
            var validationResults = validator.Validate(item);
            if(!validationResults.IsValid)
            {
                return BadRequest(validationResults.Errors);
            }

            item.AdId = Guid.NewGuid();

            //TODO: Business Rule validations?

            await repository.Add(mapper.Map<AdDto, Ads>(item)).ConfigureAwait(false);

            return CreatedAtRoute("GetAd", new { Controller = "Ad", id = item.AdId }, item);
        }

        /// <summary>
        /// Modify an existing Ad
        /// </summary>
        /// <param name="id">unique identifier for a Ad</param>
        /// <param name="updatedRecord">modified Ad model</param>
        /// <remarks>
        /// Id must be a valid GUID
        /// </remarks>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="400">Invalid Id or Model</response>
        [HttpPut]
        [Route("api/admin/[controller]/{id}")]
        public async Task<IActionResult> Update(string id, [FromBody]AdDto updatedRecord)
        {
            if (string.IsNullOrEmpty(id))
                return BadRequest();

            Guid idGuid;
            if (!Guid.TryParse(id, out idGuid))
            {
                return BadRequest();
            }

            if (updatedRecord == null)
            {
                return BadRequest();
            }

            var validator = new AdValidator();
            var validationResults = validator.Validate(updatedRecord);
            if (!validationResults.IsValid)
            {
                return BadRequest(validationResults.Errors);
            }

            var existingRecord = await repository.GetSingle(item => item.AdId == idGuid).ConfigureAwait(false);
            if (null == existingRecord)
                return NotFound();
            updatedRecord.AdId = idGuid;

            mapper.Map<AdDto, Ads>(updatedRecord, existingRecord);
            await repository.Update(existingRecord).ConfigureAwait(false);
            return Ok();
        }

        /// <summary>
        /// Delete an existing Ad
        /// </summary>
        /// <param name="id">unique identifier for a Ad</param>
        /// <remarks>
        /// Id must be a valid GUID
        /// </remarks>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid Id</response>
        [HttpDelete]
        [Route("api/admin/[controller]/{id}")]
        public async Task<IActionResult> Delete(string id)
        {
            if (string.IsNullOrEmpty(id))
                return BadRequest();

            Guid idGuid;
            if (!Guid.TryParse(id, out idGuid))
            {
                return BadRequest();
            }

            await repository.DeleteWhere(item => item.AdId == idGuid).ConfigureAwait(false);

            return Ok();
        }

        #region relationship - campaigns
        /// <summary>
        /// Get all campaigns an ad is in
        /// </summary>
        /// <param name="id">unique identifier for an ad</param>
        /// <param name="pager"></param>
        /// <remarks>
        /// The relationship between Ad and Campaign is read-only from the Ad API.
        /// For create/update/delete operations see the Campaign API.
        /// </remarks>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="400">Invalid Id</response>
        [Route("api/admin/[controller]/{id}/campaigns")]
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<AdInCampaignDto>), 200)]
        public async Task<IActionResult> GetCampaigns(string id, [FromQuery]PagerDto pager)
        {
            if (string.IsNullOrEmpty(id))
                return BadRequest();

            Guid idGuid;
            if (!Guid.TryParse(id, out idGuid))
            {
                return BadRequest();
            }


            var relations = await adForCampaignRepository.FindBy(item => item.AdId == idGuid, Pager.FromPagerDto(pager));
            if (null == relations)
                return NotFound();
            var result = mapper.Map<IEnumerable<AdsForCampaigns>, IEnumerable<AdInCampaignDto>>(relations);
            return new OkObjectResult(result);
        }
        #endregion
        #region relationship - Impression
        /// <summary>
        /// Get All Impressions for an ad
        /// </summary>
        /// <param name="adid">unique identifier for an ad</param>
        /// <param name="pager">paging settings</param>
        /// <remarks>
        /// Id must be a valid GUID
        /// </remarks>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="400">Invalid Id</response>
        [Route("api/admin/[controller]/{adid}/Impressions", Name = "GetImpressionsForAd")]
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<ImpressionDto>), 200)]
        public async Task<IActionResult> GetImpressions(string adid, [FromQuery]PagerDto pager)
        {
            if (string.IsNullOrEmpty(adid))
                return BadRequest();

            Guid idGuid;
            if (!Guid.TryParse(adid, out idGuid))
            {
                return BadRequest("invalid ad id");
            }

            var relations = await impressionRepository.FindBy(item => item.DisplayedAdId == idGuid,
                Pager.FromPagerDto(pager), item => item.FacesForImpressions);

            if (null == relations)
                return new StatusCodeResult(500);

            var result = mapper.Map<IEnumerable<Impressions>, IEnumerable<ImpressionDto>>(relations);
            return new OkObjectResult(result);
        }

        /// <summary>
        /// Get All Impressions for a campaign
        /// </summary>
        /// <param name="adid">unique identifier for a campaign</param>
        /// <param name="after">timestamp for start of series</param>
        /// <param name="pager">paging settings</param>
        /// <remarks>
        /// Id must be a valid GUID
        /// </remarks>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="400">Invalid Id</response>
        [Route("api/admin/[controller]/{adid}/Impressions/After", Name = "GetImpressionsForAdAfter")]
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<ImpressionDto>), 200)]
        public async Task<IActionResult> GetImpressionsAfter(string adid, [FromQuery]PagerDto pager, [FromQuery]DateTime? after = null)
        {
            if (string.IsNullOrEmpty(adid))
                return BadRequest();

            Guid idGuid;
            if (!Guid.TryParse(adid, out idGuid))
            {
                return BadRequest("invalid ad id");
            }

            Expression<Func<Impressions, bool>> predicate = item => item.DisplayedAdId == idGuid;
            if (null != after)
            {
                predicate = item => item.DisplayedAdId == idGuid && item.InsertTimestamp > after;
            }

            var sorter = new Order<Impressions, DateTime>
            {
                OrderByDirection = Order<Impressions, DateTime>.Direction.Descending,
                KeySelector = item => item.InsertTimestamp
            };

            var relations = await impressionRepository.FindByOrdered(predicate,
                Pager.FromPagerDto(pager), sorter, item => item.FacesForImpressions);

            if (null == relations)
                return new StatusCodeResult(500);

            var result = mapper.Map<IEnumerable<Impressions>, IEnumerable<ImpressionDto>>(relations);
            return new OkObjectResult(result);
        }
        #endregion
    }
}
