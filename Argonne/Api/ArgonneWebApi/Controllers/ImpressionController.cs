using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using ArgonneWebApi.Models.Datastore;
using ArgonneWebApi.Models.Dto;
using ArgonneWebApi.Models.Validation;
using ArgonneWebApi.Repositories;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;

namespace ArgonneWebApi.Controllers
{
    /// <summary>
    /// Administrator API for Impressions
    /// </summary>
    [Route("api/admin/[controller]")]
    [Produces("application/json")]
    public class ImpressionController : Controller
    {
        private IEntityRepository<Impressions> repository;
        private IMapper mapper;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="entityMapper"></param>
        public ImpressionController(IEntityRepository<Impressions> repo, IMapper entityMapper)
        {
            repository = repo;
            mapper = entityMapper;
        }

        /// <summary>
        /// Get all Impressions
        /// </summary>
        /// <response code="200">Success</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<ImpressionDto>), 200)]
        public async Task<IActionResult> GetAll()
        {
            return new OkObjectResult(mapper.Map<IEnumerable<Impressions>, IEnumerable<ImpressionDto>>(await repository.GetAll().ConfigureAwait(false)));
        }

        /// <summary>
        /// Get a Impression by id
        /// </summary>
        /// <param name="id">unique identifier for a Impression</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="400">Invalid Id</response>
        [HttpGet("{id}", Name = "GetImpression")]
        [ProducesResponseType(typeof(ImpressionDto), 200)]
        public async Task<IActionResult> Get(long id)
        { 
            var result = mapper.Map<Impressions, ImpressionDto>(
                await repository.GetSingle(item => item.ImpressionId == id).ConfigureAwait(false));

            if (null == result)
                return NotFound();

            return new OkObjectResult(result);
        }


        ///// <summary>
        ///// Create a new Impression
        ///// </summary>
        ///// <remarks>
        ///// Id field does not need to be supplied, it is ignored. The unique identifier for the Impression will be generated by the system.
        ///// </remarks>
        ///// <response code="201">Created</response>
        ///// <response code="400">Invalid Model</response>
        //[HttpPost]
        //[ProducesResponseType(typeof(ImpressionDto), 201)]
        //public async Task<IActionResult> Create([FromBody]ImpressionDto item)
        //{
        //    if (item == null)
        //    {
        //        return BadRequest();
        //    }

        //    var validator = new ImpressionValidator();
        //    var validationResults = validator.Validate(item);
        //    if(!validationResults.IsValid)
        //    {
        //        return BadRequest(validationResults.Errors);
        //    }

        //    item.ImpressionId = Guid.NewGuid();

        //    //TODO: Business Rule validations?

        //    await repository.Add(mapper.Map<ImpressionDto, Impressions>(item)).ConfigureAwait(false);

        //    return CreatedAtRoute("GetImpression", new { Controller = "Impression", id = item.ImpressionId }, item);
        //}

        /// <summary>
        /// Modify an existing Impression
        /// </summary>
        /// <param name="id">unique identifier for a Impression</param>
        /// <param name="updatedRecord">modified Impression model</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="400">Invalid Id or Model</response>
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(long id, [FromBody]ImpressionDto updatedRecord)
        {
            if (updatedRecord == null)
            {
                return BadRequest();
            }

            var validator = new ImpressionValidator();
            var validationResults = validator.Validate(updatedRecord);
            if (!validationResults.IsValid)
            {
                return BadRequest(validationResults.Errors);
            }

            var existingRecord = await repository.GetSingle(item => item.ImpressionId == id).ConfigureAwait(false);
            if (null == existingRecord)
                return NotFound();
            updatedRecord.ImpressionId = id;

            mapper.Map<ImpressionDto, Impressions>(updatedRecord, existingRecord);
            await repository.Update(existingRecord).ConfigureAwait(false);
            return Ok();
        }

        /// <summary>
        /// Delete an existing Impression
        /// </summary>
        /// <param name="id">unique identifier for a Impression</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid Id</response>
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(long id)
        {
            await repository.DeleteWhere(item => item.ImpressionId == id).ConfigureAwait(false);

            return Ok();
        }
    }
}
