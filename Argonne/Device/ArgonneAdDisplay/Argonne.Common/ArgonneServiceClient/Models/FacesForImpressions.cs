// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using Argonne.Common.ArgonneService.Models;
using Newtonsoft.Json.Linq;

namespace Argonne.Common.ArgonneService.Models
{
    public partial class FacesForImpressions
    {
        private int? _age;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Age
        {
            get { return this._age; }
            set { this._age = value; }
        }
        
        private string _faceId;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string FaceId
        {
            get { return this._faceId; }
            set { this._faceId = value; }
        }
        
        private string _gender;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Gender
        {
            get { return this._gender; }
            set { this._gender = value; }
        }
        
        private Impressions _impression;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public Impressions Impression
        {
            get { return this._impression; }
            set { this._impression = value; }
        }
        
        private long? _impressionId;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public long? ImpressionId
        {
            get { return this._impressionId; }
            set { this._impressionId = value; }
        }
        
        private double? _scoreAnger;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreAnger
        {
            get { return this._scoreAnger; }
            set { this._scoreAnger = value; }
        }
        
        private double? _scoreContempt;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreContempt
        {
            get { return this._scoreContempt; }
            set { this._scoreContempt = value; }
        }
        
        private double? _scoreDisgust;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreDisgust
        {
            get { return this._scoreDisgust; }
            set { this._scoreDisgust = value; }
        }
        
        private double? _scoreFear;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreFear
        {
            get { return this._scoreFear; }
            set { this._scoreFear = value; }
        }
        
        private double? _scoreHappiness;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreHappiness
        {
            get { return this._scoreHappiness; }
            set { this._scoreHappiness = value; }
        }
        
        private double? _scoreNeutral;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreNeutral
        {
            get { return this._scoreNeutral; }
            set { this._scoreNeutral = value; }
        }
        
        private double? _scoreSadness;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreSadness
        {
            get { return this._scoreSadness; }
            set { this._scoreSadness = value; }
        }
        
        private double? _scoreSurprise;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public double? ScoreSurprise
        {
            get { return this._scoreSurprise; }
            set { this._scoreSurprise = value; }
        }
        
        private int? _sequence;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Sequence
        {
            get { return this._sequence; }
            set { this._sequence = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FacesForImpressions class.
        /// </summary>
        public FacesForImpressions()
        {
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken ageValue = inputObject["age"];
                if (ageValue != null && ageValue.Type != JTokenType.Null)
                {
                    this.Age = ((int)ageValue);
                }
                JToken faceIdValue = inputObject["faceId"];
                if (faceIdValue != null && faceIdValue.Type != JTokenType.Null)
                {
                    this.FaceId = ((string)faceIdValue);
                }
                JToken genderValue = inputObject["gender"];
                if (genderValue != null && genderValue.Type != JTokenType.Null)
                {
                    this.Gender = ((string)genderValue);
                }
                JToken impressionValue = inputObject["impression"];
                if (impressionValue != null && impressionValue.Type != JTokenType.Null)
                {
                    Impressions impressions = new Impressions();
                    impressions.DeserializeJson(impressionValue);
                    this.Impression = impressions;
                }
                JToken impressionIdValue = inputObject["impressionId"];
                if (impressionIdValue != null && impressionIdValue.Type != JTokenType.Null)
                {
                    this.ImpressionId = ((long)impressionIdValue);
                }
                JToken scoreAngerValue = inputObject["scoreAnger"];
                if (scoreAngerValue != null && scoreAngerValue.Type != JTokenType.Null)
                {
                    this.ScoreAnger = ((double)scoreAngerValue);
                }
                JToken scoreContemptValue = inputObject["scoreContempt"];
                if (scoreContemptValue != null && scoreContemptValue.Type != JTokenType.Null)
                {
                    this.ScoreContempt = ((double)scoreContemptValue);
                }
                JToken scoreDisgustValue = inputObject["scoreDisgust"];
                if (scoreDisgustValue != null && scoreDisgustValue.Type != JTokenType.Null)
                {
                    this.ScoreDisgust = ((double)scoreDisgustValue);
                }
                JToken scoreFearValue = inputObject["scoreFear"];
                if (scoreFearValue != null && scoreFearValue.Type != JTokenType.Null)
                {
                    this.ScoreFear = ((double)scoreFearValue);
                }
                JToken scoreHappinessValue = inputObject["scoreHappiness"];
                if (scoreHappinessValue != null && scoreHappinessValue.Type != JTokenType.Null)
                {
                    this.ScoreHappiness = ((double)scoreHappinessValue);
                }
                JToken scoreNeutralValue = inputObject["scoreNeutral"];
                if (scoreNeutralValue != null && scoreNeutralValue.Type != JTokenType.Null)
                {
                    this.ScoreNeutral = ((double)scoreNeutralValue);
                }
                JToken scoreSadnessValue = inputObject["scoreSadness"];
                if (scoreSadnessValue != null && scoreSadnessValue.Type != JTokenType.Null)
                {
                    this.ScoreSadness = ((double)scoreSadnessValue);
                }
                JToken scoreSurpriseValue = inputObject["scoreSurprise"];
                if (scoreSurpriseValue != null && scoreSurpriseValue.Type != JTokenType.Null)
                {
                    this.ScoreSurprise = ((double)scoreSurpriseValue);
                }
                JToken sequenceValue = inputObject["sequence"];
                if (sequenceValue != null && sequenceValue.Type != JTokenType.Null)
                {
                    this.Sequence = ((int)sequenceValue);
                }
            }
        }
    }
}
