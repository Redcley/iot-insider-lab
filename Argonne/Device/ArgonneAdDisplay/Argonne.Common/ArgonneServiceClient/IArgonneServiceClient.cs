// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Argonne.Common.ArgonneService.Models;
using Microsoft.Rest;

namespace Argonne.Common.ArgonneService
{
    public partial interface IArgonneServiceClient : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri
        {
            get; set; 
        }
        
        /// <summary>
        /// Credentials for authenticating with the service.
        /// </summary>
        ServiceClientCredentials Credentials
        {
            get; set; 
        }
        
        /// <summary>
        /// The relationship between Ad and Campaign is read-only from the Ad
        /// API.
        /// For create/update/delete operations see the Campaign API.
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for an ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AdInCampaignDto>>> ApiAdminAdByIdCampaignsGetWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminAdByIdDeleteWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<AdDto>> ApiAdminAdByIdGetWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Ad model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminAdByIdPutWithOperationResponseAsync(string id, AdDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AdDto>>> ApiAdminAdGetWithOperationResponseAsync(CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the Ad will be generated by the system.
        /// </summary>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<AdDto>> ApiAdminAdPostWithOperationResponseAsync(AdDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// An add can be in multiple campaigns at the same time
        /// </summary>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<AdInCampaignDto>> ApiAdminCampaignAdsPostWithOperationResponseAsync(AdInCampaignDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Campaign Id must be a valid GUID.
        /// Ad Id must be a valid GUID
        /// </summary>
        /// <param name='updatedRecord'>
        /// Optional. modified model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminCampaignAdsPutWithOperationResponseAsync(AdInCampaignDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID.
        /// AdId must be a valid GUID.
        /// </summary>
        /// <param name='campaignid'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='adid'>
        /// Required. unique identifier for an ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminCampaignByCampaignidAdsByAdidDeleteWithOperationResponseAsync(string campaignid, string adid, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// AdId must be a valid GUID
        /// </summary>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='adid'>
        /// Required. unique identifier for an ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<AdInCampaignDto>> ApiAdminCampaignByCampaignidAdsByAdidGetWithOperationResponseAsync(string campaignid, string adid, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AdInCampaignDto>>> ApiAdminCampaignByCampaignidAdsGetWithOperationResponseAsync(string campaignid, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID.
        /// DeviceId must be a valid GUID.
        /// </summary>
        /// <param name='campaignid'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='deviceid'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminCampaignByCampaignidDevicesByDeviceidDeleteWithOperationResponseAsync(string campaignid, string deviceid, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// A device can only be in one campaign at a time.
        /// If a device is already in another campaign when this is called it
        /// will be removed from the old campaign.
        /// </summary>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='deviceid'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminCampaignByCampaignidDevicesByDeviceidPostWithOperationResponseAsync(string campaignid, string deviceid, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Devices>>> ApiAdminCampaignByCampaignidDevicesGetWithOperationResponseAsync(string campaignid, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminCampaignByIdDeleteWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<CampaignDto>> ApiAdminCampaignByIdGetWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CampaignDto>>> ApiAdminCampaignGetWithOperationResponseAsync(CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the Campaign will be generated by the system.
        /// </summary>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<CampaignDto>> ApiAdminCampaignPostWithOperationResponseAsync(CampaignDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Campaign Id must be a valid GUID
        /// </summary>
        /// <param name='updatedRecord'>
        /// Optional. modified Campaign model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminCampaignPutWithOperationResponseAsync(CampaignDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminDeviceByIdDeleteWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeviceDto>> ApiAdminDeviceByIdGetWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified device model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminDeviceByIdPutWithOperationResponseAsync(string id, DeviceDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<DeviceDto>>> ApiAdminDeviceGetWithOperationResponseAsync(CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the device will be generated by the system.
        /// </summary>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeviceDto>> ApiAdminDevicePostWithOperationResponseAsync(DeviceDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminImpressionByIdDeleteWithOperationResponseAsync(long id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImpressionDto>> ApiAdminImpressionByIdGetWithOperationResponseAsync(long id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Impression model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiAdminImpressionByIdPutWithOperationResponseAsync(long id, ImpressionDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ImpressionDto>>> ApiAdminImpressionGetWithOperationResponseAsync(CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
