// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Argonne.Common.ArgonneService;
using Argonne.Common.ArgonneService.Models;
using Microsoft.Rest;

namespace Argonne.Common.ArgonneService
{
    public static partial class ArgonneServiceClientExtensions
    {
        /// <summary>
        /// The relationship between Ad and Campaign is read-only from the Ad
        /// API.
        /// For create/update/delete operations see the Campaign API.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for an ad
        /// </param>
        public static IList<AdInCampaignDto> ApiAdminAdByIdCampaignsGet(this IArgonneServiceClient operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminAdByIdCampaignsGetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The relationship between Ad and Campaign is read-only from the Ad
        /// API.
        /// For create/update/delete operations see the Campaign API.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for an ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<AdInCampaignDto>> ApiAdminAdByIdCampaignsGetAsync(this IArgonneServiceClient operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Argonne.Common.ArgonneService.Models.AdInCampaignDto>> result = await operations.ApiAdminAdByIdCampaignsGetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        public static object ApiAdminAdByIdDelete(this IArgonneServiceClient operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminAdByIdDeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminAdByIdDeleteAsync(this IArgonneServiceClient operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminAdByIdDeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        public static AdDto ApiAdminAdByIdGet(this IArgonneServiceClient operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminAdByIdGetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<AdDto> ApiAdminAdByIdGetAsync(this IArgonneServiceClient operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.AdDto> result = await operations.ApiAdminAdByIdGetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Ad model
        /// </param>
        public static object ApiAdminAdByIdPut(this IArgonneServiceClient operations, string id, AdDto updatedRecord = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminAdByIdPutAsync(id, updatedRecord);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Ad
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Ad model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminAdByIdPutAsync(this IArgonneServiceClient operations, string id, AdDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminAdByIdPutWithOperationResponseAsync(id, updatedRecord, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        public static IList<AdDto> ApiAdminAdGet(this IArgonneServiceClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminAdGetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<AdDto>> ApiAdminAdGetAsync(this IArgonneServiceClient operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Argonne.Common.ArgonneService.Models.AdDto>> result = await operations.ApiAdminAdGetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the Ad will be generated by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        public static AdDto ApiAdminAdPost(this IArgonneServiceClient operations, AdDto item = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminAdPostAsync(item);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the Ad will be generated by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<AdDto> ApiAdminAdPostAsync(this IArgonneServiceClient operations, AdDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.AdDto> result = await operations.ApiAdminAdPostWithOperationResponseAsync(item, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// An add can be in multiple campaigns at the same time
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        public static AdInCampaignDto ApiAdminCampaignAdsPost(this IArgonneServiceClient operations, AdInCampaignDto item = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignAdsPostAsync(item);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// An add can be in multiple campaigns at the same time
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<AdInCampaignDto> ApiAdminCampaignAdsPostAsync(this IArgonneServiceClient operations, AdInCampaignDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.AdInCampaignDto> result = await operations.ApiAdminCampaignAdsPostWithOperationResponseAsync(item, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Campaign Id must be a valid GUID.
        /// Ad Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified model
        /// </param>
        public static object ApiAdminCampaignAdsPut(this IArgonneServiceClient operations, AdInCampaignDto updatedRecord = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignAdsPutAsync(updatedRecord);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Campaign Id must be a valid GUID.
        /// Ad Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminCampaignAdsPutAsync(this IArgonneServiceClient operations, AdInCampaignDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminCampaignAdsPutWithOperationResponseAsync(updatedRecord, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID.
        /// AdId must be a valid GUID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='adid'>
        /// Required. unique identifier for an ad
        /// </param>
        public static object ApiAdminCampaignByCampaignidAdsByAdidDelete(this IArgonneServiceClient operations, string campaignid, string adid)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByCampaignidAdsByAdidDeleteAsync(campaignid, adid);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID.
        /// AdId must be a valid GUID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='adid'>
        /// Required. unique identifier for an ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminCampaignByCampaignidAdsByAdidDeleteAsync(this IArgonneServiceClient operations, string campaignid, string adid, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminCampaignByCampaignidAdsByAdidDeleteWithOperationResponseAsync(campaignid, adid, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// AdId must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='adid'>
        /// Required. unique identifier for an ad
        /// </param>
        public static AdInCampaignDto ApiAdminCampaignByCampaignidAdsByAdidGet(this IArgonneServiceClient operations, string campaignid, string adid)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByCampaignidAdsByAdidGetAsync(campaignid, adid);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// AdId must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='adid'>
        /// Required. unique identifier for an ad
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<AdInCampaignDto> ApiAdminCampaignByCampaignidAdsByAdidGetAsync(this IArgonneServiceClient operations, string campaignid, string adid, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.AdInCampaignDto> result = await operations.ApiAdminCampaignByCampaignidAdsByAdidGetWithOperationResponseAsync(campaignid, adid, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        public static IList<AdInCampaignDto> ApiAdminCampaignByCampaignidAdsGet(this IArgonneServiceClient operations, string campaignid)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByCampaignidAdsGetAsync(campaignid);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<AdInCampaignDto>> ApiAdminCampaignByCampaignidAdsGetAsync(this IArgonneServiceClient operations, string campaignid, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Argonne.Common.ArgonneService.Models.AdInCampaignDto>> result = await operations.ApiAdminCampaignByCampaignidAdsGetWithOperationResponseAsync(campaignid, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID.
        /// DeviceId must be a valid GUID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='deviceid'>
        /// Required. unique identifier for a device
        /// </param>
        public static object ApiAdminCampaignByCampaignidDevicesByDeviceidDelete(this IArgonneServiceClient operations, string campaignid, string deviceid)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByCampaignidDevicesByDeviceidDeleteAsync(campaignid, deviceid);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID.
        /// DeviceId must be a valid GUID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='deviceid'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminCampaignByCampaignidDevicesByDeviceidDeleteAsync(this IArgonneServiceClient operations, string campaignid, string deviceid, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminCampaignByCampaignidDevicesByDeviceidDeleteWithOperationResponseAsync(campaignid, deviceid, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// A device can only be in one campaign at a time.
        /// If a device is already in another campaign when this is called it
        /// will be removed from the old campaign.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='deviceid'>
        /// Required. unique identifier for a device
        /// </param>
        public static object ApiAdminCampaignByCampaignidDevicesByDeviceidPost(this IArgonneServiceClient operations, string campaignid, string deviceid)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByCampaignidDevicesByDeviceidPostAsync(campaignid, deviceid);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A device can only be in one campaign at a time.
        /// If a device is already in another campaign when this is called it
        /// will be removed from the old campaign.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='deviceid'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminCampaignByCampaignidDevicesByDeviceidPostAsync(this IArgonneServiceClient operations, string campaignid, string deviceid, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminCampaignByCampaignidDevicesByDeviceidPostWithOperationResponseAsync(campaignid, deviceid, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        public static IList<Devices> ApiAdminCampaignByCampaignidDevicesGet(this IArgonneServiceClient operations, string campaignid)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByCampaignidDevicesGetAsync(campaignid);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='campaignid'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Devices>> ApiAdminCampaignByCampaignidDevicesGetAsync(this IArgonneServiceClient operations, string campaignid, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Argonne.Common.ArgonneService.Models.Devices>> result = await operations.ApiAdminCampaignByCampaignidDevicesGetWithOperationResponseAsync(campaignid, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Campaign
        /// </param>
        public static object ApiAdminCampaignByIdDelete(this IArgonneServiceClient operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByIdDeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminCampaignByIdDeleteAsync(this IArgonneServiceClient operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminCampaignByIdDeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a campaign
        /// </param>
        public static CampaignDto ApiAdminCampaignByIdGet(this IArgonneServiceClient operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignByIdGetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a campaign
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CampaignDto> ApiAdminCampaignByIdGetAsync(this IArgonneServiceClient operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.CampaignDto> result = await operations.ApiAdminCampaignByIdGetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        public static IList<CampaignDto> ApiAdminCampaignGet(this IArgonneServiceClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignGetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<CampaignDto>> ApiAdminCampaignGetAsync(this IArgonneServiceClient operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Argonne.Common.ArgonneService.Models.CampaignDto>> result = await operations.ApiAdminCampaignGetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the Campaign will be generated by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        public static CampaignDto ApiAdminCampaignPost(this IArgonneServiceClient operations, CampaignDto item = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignPostAsync(item);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the Campaign will be generated by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CampaignDto> ApiAdminCampaignPostAsync(this IArgonneServiceClient operations, CampaignDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.CampaignDto> result = await operations.ApiAdminCampaignPostWithOperationResponseAsync(item, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Campaign Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Campaign model
        /// </param>
        public static object ApiAdminCampaignPut(this IArgonneServiceClient operations, CampaignDto updatedRecord = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminCampaignPutAsync(updatedRecord);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Campaign Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Campaign model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminCampaignPutAsync(this IArgonneServiceClient operations, CampaignDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminCampaignPutWithOperationResponseAsync(updatedRecord, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        public static object ApiAdminDeviceByIdDelete(this IArgonneServiceClient operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminDeviceByIdDeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminDeviceByIdDeleteAsync(this IArgonneServiceClient operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminDeviceByIdDeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        public static DeviceDto ApiAdminDeviceByIdGet(this IArgonneServiceClient operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminDeviceByIdGetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<DeviceDto> ApiAdminDeviceByIdGetAsync(this IArgonneServiceClient operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.DeviceDto> result = await operations.ApiAdminDeviceByIdGetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified device model
        /// </param>
        public static object ApiAdminDeviceByIdPut(this IArgonneServiceClient operations, string id, DeviceDto updatedRecord = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminDeviceByIdPutAsync(id, updatedRecord);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id must be a valid GUID
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a device
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified device model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminDeviceByIdPutAsync(this IArgonneServiceClient operations, string id, DeviceDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminDeviceByIdPutWithOperationResponseAsync(id, updatedRecord, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        public static IList<DeviceDto> ApiAdminDeviceGet(this IArgonneServiceClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminDeviceGetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<DeviceDto>> ApiAdminDeviceGetAsync(this IArgonneServiceClient operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Argonne.Common.ArgonneService.Models.DeviceDto>> result = await operations.ApiAdminDeviceGetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the device will be generated by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        public static DeviceDto ApiAdminDevicePost(this IArgonneServiceClient operations, DeviceDto item = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminDevicePostAsync(item);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Id field does not need to be supplied, it is ignored. The unique
        /// identifier for the device will be generated by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='item'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<DeviceDto> ApiAdminDevicePostAsync(this IArgonneServiceClient operations, DeviceDto item = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.DeviceDto> result = await operations.ApiAdminDevicePostWithOperationResponseAsync(item, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        public static object ApiAdminImpressionByIdDelete(this IArgonneServiceClient operations, long id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminImpressionByIdDeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminImpressionByIdDeleteAsync(this IArgonneServiceClient operations, long id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminImpressionByIdDeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        public static ImpressionDto ApiAdminImpressionByIdGet(this IArgonneServiceClient operations, long id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminImpressionByIdGetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ImpressionDto> ApiAdminImpressionByIdGetAsync(this IArgonneServiceClient operations, long id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Argonne.Common.ArgonneService.Models.ImpressionDto> result = await operations.ApiAdminImpressionByIdGetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Impression model
        /// </param>
        public static object ApiAdminImpressionByIdPut(this IArgonneServiceClient operations, long id, ImpressionDto updatedRecord = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminImpressionByIdPutAsync(id, updatedRecord);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='id'>
        /// Required. unique identifier for a Impression
        /// </param>
        /// <param name='updatedRecord'>
        /// Optional. modified Impression model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiAdminImpressionByIdPutAsync(this IArgonneServiceClient operations, long id, ImpressionDto updatedRecord = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiAdminImpressionByIdPutWithOperationResponseAsync(id, updatedRecord, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        public static IList<ImpressionDto> ApiAdminImpressionGet(this IArgonneServiceClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArgonneServiceClient)s).ApiAdminImpressionGetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Argonne.Common.ArgonneService.IArgonneServiceClient.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ImpressionDto>> ApiAdminImpressionGetAsync(this IArgonneServiceClient operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Argonne.Common.ArgonneService.Models.ImpressionDto>> result = await operations.ApiAdminImpressionGetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
