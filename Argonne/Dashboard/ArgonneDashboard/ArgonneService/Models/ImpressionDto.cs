// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Argonne.Services.ArgonneService.Models;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;
using TypeLite;

namespace Argonne.Services.ArgonneService.Models
{
    [TsClass]
    public partial class ImpressionDto
    {
        private string _campaignId;
        
        /// <summary>
        /// Required. Campaign of Ad being displayed at time of impression
        /// </summary>
        public string CampaignId
        {
            get { return this._campaignId; }
            set { this._campaignId = value; }
        }
        
        private string _deviceId;
        
        /// <summary>
        /// Required. The device where the impression occurred
        /// </summary>
        public string DeviceId
        {
            get { return this._deviceId; }
            set { this._deviceId = value; }
        }
        
        private DateTimeOffset? _deviceTimestamp;
        
        /// <summary>
        /// Optional. Timestamp from device at time of impression
        /// </summary>
        public DateTimeOffset? DeviceTimestamp
        {
            get { return this._deviceTimestamp; }
            set { this._deviceTimestamp = value; }
        }
        
        private string _displayedAdId;
        
        /// <summary>
        /// Required. Ad being displayed at time of impression
        /// </summary>
        public string DisplayedAdId
        {
            get { return this._displayedAdId; }
            set { this._displayedAdId = value; }
        }
        
        private IList<FaceForImpressionDto> _faces;
        
        /// <summary>
        /// Optional. Faces detected in an impression
        /// </summary>
        public IList<FaceForImpressionDto> Faces
        {
            get { return this._faces; }
            set { this._faces = value; }
        }
        
        private long? _impressionId;
        
        /// <summary>
        /// Optional. Globally unique identifier assigned by Argonne system
        /// </summary>
        public long? ImpressionId
        {
            get { return this._impressionId; }
            set { this._impressionId = value; }
        }
        
        private DateTimeOffset? _insertTimestamp;
        
        /// <summary>
        /// Optional. Timestamp from Argonne system when impression is recorded
        /// </summary>
        public DateTimeOffset? InsertTimestamp
        {
            get { return this._insertTimestamp; }
            set { this._insertTimestamp = value; }
        }
        
        private string _messageId;
        
        /// <summary>
        /// Optional. Cognitive services message id
        /// </summary>
        public string MessageId
        {
            get { return this._messageId; }
            set { this._messageId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ImpressionDto class.
        /// </summary>
        public ImpressionDto()
        {
            this.Faces = new LazyList<FaceForImpressionDto>();
        }
        
        /// <summary>
        /// Initializes a new instance of the ImpressionDto class with required
        /// arguments.
        /// </summary>
        public ImpressionDto(string deviceId, string displayedAdId, string campaignId)
            : this()
        {
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (displayedAdId == null)
            {
                throw new ArgumentNullException("displayedAdId");
            }
            if (campaignId == null)
            {
                throw new ArgumentNullException("campaignId");
            }
            this.DeviceId = deviceId;
            this.DisplayedAdId = displayedAdId;
            this.CampaignId = campaignId;
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken campaignIdValue = inputObject["campaignId"];
                if (campaignIdValue != null && campaignIdValue.Type != JTokenType.Null)
                {
                    this.CampaignId = ((string)campaignIdValue);
                }
                JToken deviceIdValue = inputObject["deviceId"];
                if (deviceIdValue != null && deviceIdValue.Type != JTokenType.Null)
                {
                    this.DeviceId = ((string)deviceIdValue);
                }
                JToken deviceTimestampValue = inputObject["deviceTimestamp"];
                if (deviceTimestampValue != null && deviceTimestampValue.Type != JTokenType.Null)
                {
                    this.DeviceTimestamp = ((DateTimeOffset)deviceTimestampValue);
                }
                JToken displayedAdIdValue = inputObject["displayedAdId"];
                if (displayedAdIdValue != null && displayedAdIdValue.Type != JTokenType.Null)
                {
                    this.DisplayedAdId = ((string)displayedAdIdValue);
                }
                JToken facesSequence = ((JToken)inputObject["faces"]);
                if (facesSequence != null && facesSequence.Type != JTokenType.Null)
                {
                    foreach (JToken facesValue in ((JArray)facesSequence))
                    {
                        FaceForImpressionDto faceForImpressionDto = new FaceForImpressionDto();
                        faceForImpressionDto.DeserializeJson(facesValue);
                        this.Faces.Add(faceForImpressionDto);
                    }
                }
                JToken impressionIdValue = inputObject["impressionId"];
                if (impressionIdValue != null && impressionIdValue.Type != JTokenType.Null)
                {
                    this.ImpressionId = ((long)impressionIdValue);
                }
                JToken insertTimestampValue = inputObject["insertTimestamp"];
                if (insertTimestampValue != null && insertTimestampValue.Type != JTokenType.Null)
                {
                    this.InsertTimestamp = ((DateTimeOffset)insertTimestampValue);
                }
                JToken messageIdValue = inputObject["messageId"];
                if (messageIdValue != null && messageIdValue.Type != JTokenType.Null)
                {
                    this.MessageId = ((string)messageIdValue);
                }
            }
        }
    }
}
